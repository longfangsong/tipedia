/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_timestamp_free(a: number): void;
export function __wbg_get_timestamp_0(a: number, b: number): void;
export function __wbg_set_timestamp_0(a: number, b: number, c: number): void;
export function write_type_from_u8(a: number): number;
export function write_type_to_u8(a: number): number;
export function __wbg_write_free(a: number): void;
export function __wbg_get_write_write_type(a: number): number;
export function __wbg_set_write_write_type(a: number, b: number): void;
export function __wbg_get_write_start_ts(a: number): number;
export function __wbg_set_write_start_ts(a: number, b: number): void;
export function __wbg_get_write_has_overlapped_rollback(a: number): number;
export function __wbg_set_write_has_overlapped_rollback(a: number, b: number): void;
export function __wbg_get_write_gc_fence(a: number): number;
export function __wbg_set_write_gc_fence(a: number, b: number): void;
export function __wbg_parsingtrace_free(a: number): void;
export function __wbg_get_parsingtrace_start(a: number): number;
export function __wbg_set_parsingtrace_start(a: number, b: number): void;
export function __wbg_get_parsingtrace_width(a: number): number;
export function __wbg_set_parsingtrace_width(a: number, b: number): void;
export function parsingtrace_description(a: number, b: number): void;
export function write_parse(a: number, b: number): number;
export function write_to_bytes(a: number, b: number): void;
export function write_short_value(a: number, b: number): void;
export function write_set_short_value(a: number, b: number, c: number): void;
export function write_parsing_trace(a: number): number;
export function __wbg_record_free(a: number): void;
export function __wbg_get_record_table_id(a: number, b: number): void;
export function __wbg_set_record_table_id(a: number, b: number, c: number): void;
export function __wbg_get_record_row_id(a: number, b: number): void;
export function __wbg_set_record_row_id(a: number, b: number, c: number): void;
export function parse_record(a: number, b: number): number;
export function parse_input(a: number, b: number, c: number): void;
export function parse_golang_fmt_print(a: number, b: number, c: number): void;
export function parse_hex_encoded(a: number, b: number, c: number): void;
export function big_endian_decode_u64(a: number, b: number, c: number): void;
export function big_endian_encode_u64(a: number, b: number, c: number, d: number): void;
export function little_endian_decode_u64(a: number, b: number, c: number): void;
export function little_endian_encode_u64(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
